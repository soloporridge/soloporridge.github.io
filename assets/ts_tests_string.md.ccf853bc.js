import{_ as p,r as c,c as l,e as o,w as a,d as e,o as i,a as n,b as s}from"./app.39a282b1.js";const sn='{"title":"CapitalizeString","description":"","frontmatter":{},"headers":[{"level":2,"title":"CapitalizeString","slug":"capitalizestring"},{"level":2,"title":"FirstChar","slug":"firstchar"},{"level":2,"title":"LastChar","slug":"lastchar"},{"level":2,"title":"StringToTuple","slug":"stringtotuple"},{"level":2,"title":"TupleToString","slug":"tupletostring"},{"level":2,"title":"RepeatString","slug":"repeatstring-t-c"},{"level":2,"title":"SplitString","slug":"splitstring"},{"level":2,"title":"LengthOfString","slug":"lengthofstring"},{"level":2,"title":"KebabCase","slug":"kebabcase"},{"level":2,"title":"CamelCase","slug":"camelcase"},{"level":2,"title":"ObjectAccessPaths","slug":"objectaccesspaths"},{"level":2,"title":"ComponentEmitsType","slug":"componentemitstype"}],"relativePath":"ts/tests/string.md","lastUpdated":1639559016000}',r={},k=e(`<h2 id="capitalizestring" tabindex="-1">CapitalizeString <a class="header-anchor" href="#capitalizestring" aria-hidden="true">#</a></h2><p>\u9996\u5B57\u6BCD\u5927\u5199</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">a1</span> <span class="token operator">=</span> CapitalizeString<span class="token operator">&lt;</span><span class="token string">&#39;handler&#39;</span><span class="token operator">&gt;</span>       <span class="token comment">// Handler</span>
<span class="token keyword">type</span> <span class="token class-name">a2</span> <span class="token operator">=</span> CapitalizeString<span class="token operator">&lt;</span><span class="token string">&#39;parent&#39;</span><span class="token operator">&gt;</span>        <span class="token comment">// Parent</span>
<span class="token keyword">type</span> <span class="token class-name">a3</span> <span class="token operator">=</span> CapitalizeString<span class="token operator">&lt;</span><span class="token number">233</span><span class="token operator">&gt;</span>             <span class="token comment">// 233</span>
</code></pre></div>`,3),u=n("div",null,[s("\u4F7F\u7528\u6A21\u677F\u5B57\u7B26\u4E32\u7C7B\u578B\uFF0C"),n("code",null,"L"),s(" \u8868\u793A\u7B2C\u4E00\u4E2A\u5B57\u7B26\uFF0C"),n("code",null,"R"),s(" \u8868\u793A\u5269\u4E0B\u7684\u5B57\u7B26\u4E32")],-1),d=n("div",{class:"language-ts"},[n("pre",null,[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("CapitalizeString"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("Uppercase"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"L"),n("span",{class:"token operator"},">"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"T"),s(`
`)])])],-1),g=e(`<h2 id="firstchar" tabindex="-1">FirstChar <a class="header-anchor" href="#firstchar" aria-hidden="true">#</a></h2><p>\u83B7\u53D6\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u4E2D\u7684\u7B2C\u4E00\u4E2A\u5B57\u7B26</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> FirstChar<span class="token operator">&lt;</span><span class="token string">&#39;BFE&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;B&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> FirstChar<span class="token operator">&lt;</span><span class="token string">&#39;dev&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;d&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> FirstChar<span class="token operator">&lt;</span><span class="token string">&#39;&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// never</span>
</code></pre></div>`,3),m=n("div",null,[s("\u4F7F\u7528\u6A21\u677F\u5B57\u7B26\u4E32\u7C7B\u578B\uFF0C"),n("code",null,"L"),s(" \u8868\u793A\u7B2C\u4E00\u4E2A\u5B57\u7B26\uFF0C"),n("code",null,"R"),s(" \u8868\u793A\u5269\u4E0B\u7684\u5B57\u7B26\u4E32")],-1),_=n("div",{class:"language-ts"},[n("pre",null,[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("FirstChar"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token constant"},"L"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"never"),s(`
`)])])],-1),h=e(`<h2 id="lastchar" tabindex="-1">LastChar <a class="header-anchor" href="#lastchar" aria-hidden="true">#</a></h2><p>\u83B7\u53D6\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u4E2D\u7684\u6700\u540E\u4E00\u4E2A\u5B57\u7B26</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> LastChar<span class="token operator">&lt;</span><span class="token string">&#39;BFE&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;E&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> LastChar<span class="token operator">&lt;</span><span class="token string">&#39;dev&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;v&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> LastChar<span class="token operator">&lt;</span><span class="token string">&#39;&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// never</span>
</code></pre></div>`,3),y=n("div",null,[s("\u4F7F\u7528\u6A21\u677F\u5B57\u7B26\u4E32\u7C7B\u578B\uFF0C"),n("code",null,"L"),s(" \u8868\u793A\u7B2C\u4E00\u4E2A\u5B57\u7B26\uFF0C"),n("code",null,"R"),s(" \u8868\u793A\u5269\u4E0B\u7684\u5B57\u7B26\u4E32\uFF0C\u9012\u5F52\u5904\u7406\uFF0C\u76F4\u5230 "),n("code",null,"R"),s(" \u4E3A\u7A7A\u4E32\u6216\u8005 "),n("code",null,"T"),s(" \u4E0D\u6EE1\u8DB3 "),n("code",null,"${infer L}${infer R}"),s(" \u4E3A\u6B62")],-1),T=n("div",{class:"language-ts"},[n("pre",null,[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("LastChar"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token constant"},"R"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token string"},"''"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token constant"},"L"),s(),n("span",{class:"token operator"},":"),s(" LastChar"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"R"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"never"),s(`

`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("LastChar"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"S"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token builtin"},"never"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(" LastChar"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"R"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"S"),s(`
`),n("span",{class:"token comment"},"// \u6CE8\u610F"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},"a"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"''"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token number"},"2"),s("  "),n("span",{class:"token comment"},"// 2"),s(`
`)])])],-1),S=e(`<h2 id="stringtotuple" tabindex="-1">StringToTuple <a class="header-anchor" href="#stringtotuple" aria-hidden="true">#</a></h2><p>\u5B57\u7B26\u4E32\u8F6C\u6362\u4E3A\u5143\u7EC4\u7C7B\u578B</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> StringToTuple<span class="token operator">&lt;</span><span class="token string">&#39;BFE.dev&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// [&#39;B&#39;, &#39;F&#39;, &#39;E&#39;, &#39;.&#39;, &#39;d&#39;, &#39;e&#39;,&#39;v&#39;]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> StringToTuple<span class="token operator">&lt;</span><span class="token string">&#39;&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// []</span>
</code></pre></div>`,3),w=n("div",null,[s("\u4F7F\u7528\u6A21\u677F\u5B57\u7B26\u4E32\u7C7B\u578B\uFF0C"),n("code",null,"L"),s(" \u8868\u793A\u7B2C\u4E00\u4E2A\u5B57\u7B26\uFF0C"),n("code",null,"R"),s(" \u8868\u793A\u5269\u4E0B\u7684\u5B57\u7B26\u4E32")],-1),C=n("div",{class:"language-ts"},[n("pre",null,[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("StringToTuple"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"S"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(" StringToTuple"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"R"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),n("span",{class:"token constant"},"S"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"S"),s(`
`)])])],-1),f=e(`<h2 id="tupletostring" tabindex="-1">TupleToString <a class="header-anchor" href="#tupletostring" aria-hidden="true">#</a></h2><p>\u5C06\u5B57\u7B26\u4E32\u7C7B\u578B\u7684\u5143\u7D20\u8F6C\u6362\u4E3A\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u7C7B\u578B</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> TupleToString<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;abc&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> TupleToString<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>              <span class="token comment">// &#39;&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token operator">=</span> TupleToString<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>           <span class="token comment">// &#39;a&#39;</span>
</code></pre></div>`,3),b=n("div",null,[s("\u4F7F\u7528\u6A21\u677F\u5B57\u7B26\u4E32\u7C7B\u578B\uFF0C"),n("code",null,"L"),s(" \u8868\u793A\u5143\u7EC4\u7B2C\u4E00\u4E2A\u5B57\u7B26\uFF0C"),n("code",null,"R"),s(" \u8868\u793A\u5269\u4E0B\u7684\u5B57\u7B26\u4E32\u6570\u7EC4\uFF0C\u7C7B\u4F3C "),n("code",null,"...rest")],-1),$=n("div",{class:"language-ts"},[n("pre",null,[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("TupleToString"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"S"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"''"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"..."),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"("),s(`
   `),n("span",{class:"token constant"},"L"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},[n("span",{class:"token builtin"},"string")]),s(),n("span",{class:"token operator"},"?"),s(" TupleToString"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"R"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"S"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"never"),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"S"),s(`
`)])])],-1),v=e(`<h2 id="repeatstring-t-c" tabindex="-1">RepeatString&lt;T,C&gt; <a class="header-anchor" href="#repeatstring-t-c" aria-hidden="true">#</a></h2><p>\u590D\u5236\u5B57\u7B26T\u4E3A\u5B57\u7B26\u4E32\u7C7B\u578B\uFF0C\u957F\u5EA6\u4E3AC</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> RepeatString<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;aaa&#39;</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> RepeatString<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;&#39;</span>
</code></pre></div>`,3),x=n("div",null,"\u4F7F\u7528\u6570\u7EC4\u505A\u5224\u65AD\u7684\u901A\u5E38\u4F7F\u7528\u5143\u7EC4\u5F62\u5F0F\uFF0C\u7528\u957F\u5EA6\u5224\u65AD",-1),R=n("div",{class:"language-ts"},[n("pre",null,[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("RepeatString"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"K"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"A"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"S"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"''"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"A"),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'length'"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},[n("span",{class:"token constant"},"K")]),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token constant"},"S"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"("),s(`
    RepeatString`),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"K"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),n("span",{class:"token constant"},"A"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"S"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"T"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token operator"},">"),s(`
`),n("span",{class:"token punctuation"},")"),s(`
`)])])],-1),L=e(`<h2 id="splitstring" tabindex="-1">SplitString <a class="header-anchor" href="#splitstring" aria-hidden="true">#</a></h2><p>\u5C06\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u7C7B\u578B\u6309\u7167\u6307\u5B9A\u5B57\u7B26\uFF0C\u5206\u5272\u4E3A\u5143\u7EC4\u3002\u65E0\u6CD5\u5206\u5272\u5219\u8FD4\u56DE\u539F\u5B57\u7B26\u4E32\u5B57\u9762\u91CF</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A1</span></span> <span class="token operator">=</span> SplitString<span class="token operator">&lt;</span><span class="token string">&#39;handle-open-flag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token operator">&gt;</span>        <span class="token comment">// [&quot;handle&quot;, &quot;open&quot;, &quot;flag&quot;]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A2</span></span> <span class="token operator">=</span> SplitString<span class="token operator">&lt;</span><span class="token string">&#39;open-flag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token operator">&gt;</span>               <span class="token comment">// [&quot;open&quot;, &quot;flag&quot;]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A3</span></span> <span class="token operator">=</span> SplitString<span class="token operator">&lt;</span><span class="token string">&#39;handle.open.flag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token operator">&gt;</span>        <span class="token comment">// [&quot;handle&quot;, &quot;open&quot;, &quot;flag&quot;]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A4</span></span> <span class="token operator">=</span> SplitString<span class="token operator">&lt;</span><span class="token string">&#39;open.flag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token operator">&gt;</span>               <span class="token comment">// [&quot;open&quot;, &quot;flag&quot;]</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A5</span></span> <span class="token operator">=</span> SplitString<span class="token operator">&lt;</span><span class="token string">&#39;open.flag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token operator">&gt;</span>               <span class="token comment">// [&quot;open.flag&quot;]</span>
</code></pre></div>`,3),A=n("div",null,[s("\u4EE5 "),n("code",null,"K"),s(" \u4E3A\u5206\u9694\u7B26\uFF0C"),n("code",null,"L"),s(" \u4E3A\u524D\u9762\u5B57\u7B26\uFF0C"),n("code",null,"R"),s(" \u4E3A\u540E\u9762\u5B57\u7B26")],-1),K=n("div",{class:"language-ts"},[n("pre",null,[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("SplitString"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"K"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"S"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"K"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(" SplitString"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"R"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"K"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),n("span",{class:"token constant"},"S"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),n("span",{class:"token constant"},"S"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},"]"),s(`
`)])])],-1),P=e(`<h2 id="lengthofstring" tabindex="-1">LengthOfString <a class="header-anchor" href="#lengthofstring" aria-hidden="true">#</a></h2><p>\u8BA1\u7B97\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u7C7B\u578B\u7684\u957F\u5EA6</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> LengthOfString<span class="token operator">&lt;</span><span class="token string">&#39;BFE.dev&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// 7</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> LengthOfString<span class="token operator">&lt;</span><span class="token string">&#39;&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// 0</span>
</code></pre></div>`,3),I=n("div",null,"\u4EE5\u5143\u7EC4\u5F62\u5F0F\u5224\u65AD\u957F\u5EA6",-1),E=n("div",{class:"language-ts"},[n("pre",null,[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("LengthOfString"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"S"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(" LengthOfString"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"R"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"..."),n("span",{class:"token constant"},"S"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"S"),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'length'"),n("span",{class:"token punctuation"},"]"),s(`
`)])])],-1),B=e(`<h2 id="kebabcase" tabindex="-1">KebabCase <a class="header-anchor" href="#kebabcase" aria-hidden="true">#</a></h2><p>\u9A7C\u5CF0\u547D\u540D\u8F6C\u6A2A\u6760\u547D\u540D</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">a1</span> <span class="token operator">=</span> KebabCase<span class="token operator">&lt;</span><span class="token string">&#39;HandleOpenFlag&#39;</span><span class="token operator">&gt;</span>           <span class="token comment">// handle-open-flag</span>
<span class="token keyword">type</span> <span class="token class-name">a2</span> <span class="token operator">=</span> KebabCase<span class="token operator">&lt;</span><span class="token string">&#39;OpenFlag&#39;</span><span class="token operator">&gt;</span>                 <span class="token comment">// open-flag</span>
</code></pre></div>`,3),q=n("div",null,[s("\u4ECE\u5DE6\u5230\u53F3\u904D\u5386\uFF0C\u9047\u5230\u5927\u5199\u5B57\u6BCD\u5219\u8F6C\u6362\u4E3A "),n("code",null,"-"),s(" + \u5C0F\u5199\u5B57\u7B26")],-1),V=n("div",{class:"language-ts"},[n("pre",null,[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("RemoveFirstChar"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"-"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token constant"},"L"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"T"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("KebabCase"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"S"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"''"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token punctuation"},"("),s(`
    `),n("span",{class:"token constant"},"L"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},[s("Uppercase"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"L"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"?"),s(" KebabCase"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"R"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"S"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"-"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("Lowercase"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"L"),n("span",{class:"token operator"},">"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},":"),s(" KebabCase"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"R"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"S"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token operator"},">"),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},":"),s(" RemoveFirstChar"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"S"),n("span",{class:"token operator"},">"),s(`
`)])])],-1),F=e(`<h2 id="camelcase" tabindex="-1">CamelCase <a class="header-anchor" href="#camelcase" aria-hidden="true">#</a></h2><p>\u6A2A\u6760\u547D\u540D\u8F6C\u5316\u4E3A\u9A7C\u5CF0\u547D\u540D</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">a1</span> <span class="token operator">=</span> CamelCase<span class="token operator">&lt;</span><span class="token string">&#39;handle-open-flag&#39;</span><span class="token operator">&gt;</span>         <span class="token comment">// HandleOpenFlag</span>
<span class="token keyword">type</span> <span class="token class-name">a2</span> <span class="token operator">=</span> CamelCase<span class="token operator">&lt;</span><span class="token string">&#39;open-flag&#39;</span><span class="token operator">&gt;</span>                <span class="token comment">// OpenFlag</span>
</code></pre></div>`,3),O=n("div",null,[s("\u4ECE\u5DE6\u5230\u53F3\u904D\u5386\uFF0C\u9047\u5230 "),n("code",null,"-"),s(" + \u5C0F\u5199\u5B57\u6BCD\u5219\u8F6C\u6362\u4E3A\u5927\u5199\u5B57\u7B26")],-1),z=n("div",{class:"language-ts"},[n("pre",null,[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("CapitalizeString"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("Uppercase"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"L"),n("span",{class:"token operator"},">"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"T"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("CamelCase"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"S"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"''"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"-"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(" CamelCase"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"R"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"S"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("CapitalizeString"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"L"),n("span",{class:"token operator"},">"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"S"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("CapitalizeString"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(`
`)])])],-1),N=e(`<h2 id="objectaccesspaths" tabindex="-1">ObjectAccessPaths <a class="header-anchor" href="#objectaccesspaths" aria-hidden="true">#</a></h2><p>\u5F97\u5230\u5BF9\u8C61\u4E2D\u7684\u503C\u8BBF\u95EE\u5B57\u7B26\u4E32</p><div class="language-ts"><pre><code><span class="token comment">// \u7B80\u5355\u6765\u8BF4\uFF0C\u5C31\u662F\u6839\u636E\u5982\u4E0B\u5BF9\u8C61\u7C7B\u578B\uFF1A</span>
<span class="token comment">/*
{
    home: {
        topBar: {
            title: &#39;\u9876\u90E8\u6807\u9898&#39;,
            welcome: &#39;\u6B22\u8FCE\u767B\u5F55&#39;
        },
        bottomBar: {
            notes: &#39;XXX\u5907\u6848\uFF0C\u5F52XXX\u6240\u6709&#39;,
        },
    },
    login: {
        username: &#39;\u7528\u6237\u540D&#39;,
        password: &#39;\u5BC6\u7801&#39;
    }
}
*/</span>
<span class="token comment">// \u5F97\u5230\u8054\u5408\u7C7B\u578B\uFF1A</span>
<span class="token comment">/*
home.topBar.title | home.topBar.welcome | home.bottomBar.notes | login.username | login.password
*/</span>

<span class="token comment">// \u5B8C\u6210 createI18n \u51FD\u6570\u4E2D\u7684 ObjectAccessPaths&lt;Schema&gt;\uFF0C\u9650\u5236\u51FD\u6570i18n\u7684\u53C2\u6570\u4E3A\u5408\u6CD5\u7684\u5C5E\u6027\u8BBF\u95EE\u5B57\u7B26\u4E32</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createI18n</span><span class="token generic class-name"><span class="token operator">&lt;</span>Schema<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>schema<span class="token operator">:</span> Schema<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>path<span class="token operator">:</span> ObjectAccessPaths<span class="token operator">&lt;</span>Schema<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>schema<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">}</span>

<span class="token comment">// i18n\u51FD\u6570\u7684\u53C2\u6570\u7C7B\u578B\u4E3A\uFF1Ahome.topBar.title | home.topBar.welcome | home.bottomBar.notes | login.username | login.password</span>
<span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token function">createI18n</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    home<span class="token operator">:</span> <span class="token punctuation">{</span>
        topBar<span class="token operator">:</span> <span class="token punctuation">{</span>
            title<span class="token operator">:</span> <span class="token string">&#39;\u9876\u90E8\u6807\u9898&#39;</span><span class="token punctuation">,</span>
            welcome<span class="token operator">:</span> <span class="token string">&#39;\u6B22\u8FCE\u767B\u5F55&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        bottomBar<span class="token operator">:</span> <span class="token punctuation">{</span>
            notes<span class="token operator">:</span> <span class="token string">&#39;XXX\u5907\u6848\uFF0C\u5F52XXX\u6240\u6709&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    login<span class="token operator">:</span> <span class="token punctuation">{</span>
        username<span class="token operator">:</span> <span class="token string">&#39;\u7528\u6237\u540D&#39;</span><span class="token punctuation">,</span>
        password<span class="token operator">:</span> <span class="token string">&#39;\u5BC6\u7801&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token function">i18n</span><span class="token punctuation">(</span><span class="token string">&#39;home.topBar.title&#39;</span><span class="token punctuation">)</span>           <span class="token comment">// correct</span>
<span class="token function">i18n</span><span class="token punctuation">(</span><span class="token string">&#39;home.topBar.welcome&#39;</span><span class="token punctuation">)</span>         <span class="token comment">// correct</span>
<span class="token function">i18n</span><span class="token punctuation">(</span><span class="token string">&#39;home.bottomBar.notes&#39;</span><span class="token punctuation">)</span>        <span class="token comment">// correct</span>

<span class="token comment">// i18n(&#39;home.login.abc&#39;)              // error\uFF0C\u4E0D\u5B58\u5728\u7684\u5C5E\u6027</span>
<span class="token comment">// i18n(&#39;home.topBar&#39;)                 // error\uFF0C\u6CA1\u6709\u5230\u6700\u540E\u4E00\u4E2A\u5C5E\u6027</span>
</code></pre></div>`,3),D=n("div",null,[s("\u5982\u679C\u662F\u5BF9\u8C61\u62FC\u63A5 "),n("code",null,"K"),s(", \u5224\u65AD\u5BF9\u8C61 "),n("code",null,"Record<string, any>")],-1),j=n("div",{class:"language-ts"},[n("pre",null,[n("code",null,[n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("RemoveFirstChar"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"."),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token constant"},"L"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"T"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("ObjectAccessPaths"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"S"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"K"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token keyword"},"keyof"),s(),n("span",{class:"token constant"},"T"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(`
    `),n("span",{class:"token constant"},"K"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token keyword"},"keyof"),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token operator"},"?"),s(`
        `),n("span",{class:"token constant"},"K"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},[n("span",{class:"token builtin"},"string")]),s(),n("span",{class:"token operator"},"?"),s(`
            `),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},"["),n("span",{class:"token constant"},"K"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},[s("Record"),n("span",{class:"token operator"},"<"),n("span",{class:"token builtin"},"string"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"any"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"?"),s(`
                `),n("span",{class:"token punctuation"},"("),s("ObjectAccessPaths"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},"["),n("span",{class:"token constant"},"K"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"S"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"."),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"K"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(" RemoveFirstChar"),n("span",{class:"token operator"},"<"),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"S"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"."),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"K"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},":"),s(`
            `),n("span",{class:"token builtin"},"never"),s(),n("span",{class:"token operator"},":"),s(`
        `),n("span",{class:"token builtin"},"never"),s(`

`)])])],-1),X=e(`<h2 id="componentemitstype" tabindex="-1">ComponentEmitsType <a class="header-anchor" href="#componentemitstype" aria-hidden="true">#</a></h2><p>\u5B9A\u4E49\u7EC4\u4EF6\u7684\u76D1\u542C\u4E8B\u4EF6\u7C7B\u578B</p><div class="language-ts"><pre><code><span class="token comment">// \u5B9E\u73B0 ComponentEmitsType&lt;Emits&gt; \u7C7B\u578B\uFF0C\u5C06</span>
<span class="token comment">/*
{
    &#39;handle-open&#39;: (flag: boolean) =&gt; true,
    &#39;preview-item&#39;: (data: { item: any, index: number }) =&gt; true,
    &#39;close-item&#39;: (data: { item: any, index: number }) =&gt; true,
}
*/</span>
<span class="token comment">// \u8F6C\u5316\u4E3A\u7C7B\u578B</span>
<span class="token comment">/*
{
    onHandleOpen?: (flag: boolean) =&gt; void,
    onPreviewItem?: (data: { item: any, index: number }) =&gt; void,
    onCloseItem?: (data: { item: any, index: number }) =&gt; void,
}
*/</span>


<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createComponent</span><span class="token generic class-name"><span class="token operator">&lt;</span>Emits <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>emits<span class="token operator">:</span> Emits<span class="token punctuation">)</span><span class="token operator">:</span> ComponentEmitsType<span class="token operator">&lt;</span>Emits<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>emits<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">}</span>

<span class="token comment">// \u6700\u540E\u8FD4\u56DE\u7684 Component\u53D8\u91CF\u7C7B\u578B\u4E3A\u4E00\u4E2A\u5408\u6CD5\u7684React\u7EC4\u4EF6\u7C7B\u578B\uFF0C\u5E76\u4E14\u80FD\u591F\u901A\u8FC7\`on\u4E8B\u4EF6\u9A7C\u5CF0\u547D\u540D\`\u7684\u65B9\u5F0F\uFF0C\u76D1\u542C\u5B9A\u4E49\u7684\u4E8B\u4EF6\uFF0C\u5E76\u4E14\u80FD\u591F\u81EA\u52A8\u63A8\u5BFC\u51FA\u4E8B\u4EF6\u7684\u53C2\u6570\u7C7B\u578B</span>
<span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string">&#39;handle-open&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>flag<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string">&#39;preview-item&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token punctuation">{</span> item<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string">&#39;close-item&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token punctuation">{</span> item<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>Component
        <span class="token comment">// onHandleOpen \u7684\u7C7B\u578B\u4E3A (flag: boolean) =&gt; void</span>
        onHandleOpen<span class="token operator">=</span><span class="token punctuation">{</span>val <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token comment">// onPreviewItem \u7684\u7C7B\u578B\u4E3A (data: { item: any, index: number }) =&gt; void</span>
        onPreviewItem<span class="token operator">=</span><span class="token punctuation">{</span>val <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token punctuation">{</span>item<span class="token punctuation">,</span> index<span class="token punctuation">}</span> <span class="token operator">=</span> val
            <span class="token keyword">const</span> a<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> item
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> index<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token comment">// \u6240\u6709\u7684\u76D1\u542C\u4E8B\u4EF6\u5C5E\u6027\u90FD\u662F\u53EF\u9009\u5C5E\u6027\uFF0C\u53EF\u4EE5\u4E0D\u4F20\u5904\u7406\u51FD\u6570\u53E5\u67C4</span>
        <span class="token comment">// onCloseItem={val =&gt; [{val}]}</span>
    <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">)</span>

<span class="token comment">// \u63D0\u793A\uFF0C\u5B9A\u4E49\u7EC4\u4EF6\u7684props\u7C7B\u578B\u65B9\u5F0F\u4E3A { (props: Partial&lt;Convert&lt;Emits&gt;&gt;): any }</span>
<span class="token comment">// \u6BD4\u5982 Comp \u53EF\u4EE5\u63A5\u6536\u5C5E\u6027 {name:string, age:number, flag:boolean, id?:string}\uFF0C\u5176\u4E2Did\u4E3A\u53EF\u9009\u5C5E\u6027\uFF0C\u90A3\u4E48\u53EF\u4EE5\u8FD9\u6837\u5199</span>

<span class="token keyword">const</span> Comp<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>props<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> flag<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> id<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token builtin">Function</span> <span class="token keyword">as</span> <span class="token builtin">any</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Comp name<span class="token operator">=</span><span class="token string">&quot;&quot;</span> age<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> flag<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>           <span class="token comment">// \u6B63\u786E</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Comp name<span class="token operator">=</span><span class="token string">&quot;&quot;</span> age<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> flag id<span class="token operator">=</span><span class="token string">&quot;111&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>  <span class="token comment">// \u6B63\u786E</span>
<span class="token comment">// console.log(&lt;Comp name={1} age={1} flag/&gt;)          // \u9519\u8BEF\uFF0Cname\u4E3A\u5B57\u7B26\u4E32\u7C7B\u578B</span>
<span class="token comment">// console.log(&lt;Comp age={1} flag/&gt;)                   // \u9519\u8BEF\uFF0C\u7F3A\u5C11\u5FC5\u987B\u5C5E\u6027name:string</span>
</code></pre></div>`,3),U=n("div",null,[s("\u5982\u679C\u662F\u5BF9\u8C61\u62FC\u63A5 "),n("code",null,"K"),s(", \u5224\u65AD\u5BF9\u8C61 "),n("code",null,"Record<string, any>")],-1),H=n("div",{class:"language-ts"},[n("pre",null,[n("code",null,[n("span",{class:"token comment"},"// \u8F6C\u4E3A\u9A7C\u5CF0"),s(`
`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("CamelCase"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"''"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"S"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token builtin"},"string"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"''"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"-"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R1"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"R2"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s(`
    CamelCase`),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"R2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"S"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"L"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),s("Uppercase"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"R1"),n("span",{class:"token operator"},">"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token operator"},">"),s(`
  `),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token operator"},":"),s(" Capitalize"),n("span",{class:"token operator"},"<"),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"S"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"T"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token operator"},">"),s(`

`),n("span",{class:"token keyword"},"type"),s(),n("span",{class:"token class-name"},[s("ComponentEmitsType"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"T"),n("span",{class:"token operator"},">")]),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token punctuation"},"["),n("span",{class:"token constant"},"K"),s(),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token keyword"},"keyof"),s(),n("span",{class:"token constant"},"T"),s(),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"on"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),n("span",{class:"token constant"},"K"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},[n("span",{class:"token builtin"},"string")]),s(),n("span",{class:"token operator"},"?"),s(" CamelCase"),n("span",{class:"token operator"},"<"),n("span",{class:"token constant"},"K"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"never"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},"]"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},"["),n("span",{class:"token constant"},"K"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),s("args"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"infer"),s(),n("span",{class:"token constant"},"P"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token builtin"},"any"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"..."),s("args"),n("span",{class:"token operator"},":"),n("span",{class:"token constant"},"P"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token constant"},"T"),n("span",{class:"token punctuation"},"["),n("span",{class:"token constant"},"K"),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])])],-1);function G(J,M,Q,W,Y,Z){const t=c("demo");return i(),l("div",null,[k,o(t,{sourceCode:"type CapitalizeString<T> = T extends `${infer L}${infer R}` ? `${Uppercase<L>}${R}` : T\n"},{description:a(()=>[u]),highlight:a(()=>[d]),_:1}),g,o(t,{sourceCode:"type FirstChar<T> = T extends `${infer L}${infer R}` ? L : never\n"},{description:a(()=>[m]),highlight:a(()=>[_]),_:1}),h,o(t,{sourceCode:"type LastChar<T> = T extends `${infer L}${infer R}` ? R extends '' ? L : LastChar<R> : never\n\ntype LastChar<T, S = never> = T extends `${infer L}${infer R}` ? LastChar<R, L> : S\n// \u6CE8\u610F\ntype a = '' extends `${infer L}${infer R}` ? 1 : 2  // 2\n"},{description:a(()=>[y]),highlight:a(()=>[T]),_:1}),S,o(t,{sourceCode:"type StringToTuple<T, S extends any[] = []> = T extends `${infer L}${infer R}` ? StringToTuple<R, [...S, L]> : S\n"},{description:a(()=>[w]),highlight:a(()=>[C]),_:1}),f,o(t,{sourceCode:"type TupleToString<T, S extends string = ''> = T extends [infer L, ...infer R] ? (\n   L extends string ? TupleToString<R, `${S}${L}`> : never\n) : S\n"},{description:a(()=>[b]),highlight:a(()=>[$]),_:1}),v,o(t,{sourceCode:"type RepeatString<T, K, A extends any[] = [], S extends string = ''> = A['length'] extends K ? S : (\n    RepeatString<T, K, [...A, 1], `${S}${T}`>\n)\n"},{description:a(()=>[x]),highlight:a(()=>[R]),_:1}),L,o(t,{sourceCode:"type SplitString<T, K, S extends any[] = []> = T extends `${infer L}${K}${infer R}` ? SplitString<R, K, [...S, L]> : [...S, T]\n"},{description:a(()=>[A]),highlight:a(()=>[K]),_:1}),P,o(t,{sourceCode:"type LengthOfString<T, S extends any[] = []> = T extends `${infer L}${infer R}` ? LengthOfString<R, [...S, L]> : S['length']\n"},{description:a(()=>[I]),highlight:a(()=>[E]),_:1}),B,o(t,{sourceCode:"type RemoveFirstChar<T> = T extends `-${infer L}` ? L : T\ntype KebabCase<T, S extends string = ''> = T extends `${infer L}${infer R}` (\n    L extends Uppercase<L> ? KebabCase<R, `${S}-${Lowercase<L>}`> : KebabCase<R, `${S}${L}`>\n) ? : RemoveFirstChar<S>\n"},{description:a(()=>[q]),highlight:a(()=>[V]),_:1}),F,o(t,{sourceCode:"type CapitalizeString<T> = T extends `${infer L}${infer R}` ? `${Uppercase<L>}${R}` : T\ntype CamelCase<T, S extends string = ''> = T extends `${infer L}-${infer R}` ? CamelCase<R, `${S}${CapitalizeString<L>}`> : `${S}${CapitalizeString<T>}`\n"},{description:a(()=>[O]),highlight:a(()=>[z]),_:1}),N,o(t,{sourceCode:"type RemoveFirstChar<T> = T extends `.${infer L}` ? L : T\ntype ObjectAccessPaths<T, S extends string = '', K extends keyof T> =\n    K extends keyof T ?\n        K extends string ?\n            T[K] extends Record<string, any> ?\n                (ObjectAccessPaths<T[K], `${S}.${K}`>) : RemoveFirstChar<`${S}.${K}`> :\n            never :\n        never\n\n"},{description:a(()=>[D]),highlight:a(()=>[j]),_:1}),X,o(t,{sourceCode:"// \u8F6C\u4E3A\u9A7C\u5CF0\ntype CamelCase<T extends string = '', S extends string = ''> = T extends `${infer L}-${infer R1}${infer R2}` ? `${\n    CamelCase<R2, `${S}${L}${Uppercase<R1>}`>\n  }`: Capitalize<`${S}${T}`>\n\ntype ComponentEmitsType<T> = {\n    [K in keyof T as `on${K extends string ? CamelCase<K> : never}`]: T[K] extends (...args: infer P) => any ? (...args:P) => void : T[K]\n}\n\n"},{description:a(()=>[U]),highlight:a(()=>[H]),_:1})])}var an=p(r,[["render",G]]);export{sn as __pageData,an as default};
